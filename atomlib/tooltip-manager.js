(function() {
  var CompositeDisposable, Disposable, Tooltip, TooltipManager, _, getKeystroke, humanizeKeystrokes, ref;

  _ = require('underscore-plus');

  ref = require('event-kit'), Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable;

  Tooltip = null;

  module.exports = TooltipManager = (function() {
    TooltipManager.prototype.defaults = {
      trigger: 'hover',
      container: 'body',
      html: true,
      placement: 'auto top',
      viewportPadding: 2
    };

    TooltipManager.prototype.hoverDefaults = {
      delay: {
        show: 1000,
        hide: 100
      }
    };

    function TooltipManager(arg) {
      this.keymapManager = arg.keymapManager, this.viewRegistry = arg.viewRegistry;
      this.tooltips = new Map();
    }

    TooltipManager.prototype.add = function(target, options) {
      var bindings, disposable, element, hideTooltip, i, keyBindingCommand, keyBindingTarget, keystroke, len, tooltip;
      if (target.jquery) {
        disposable = new CompositeDisposable;
        for (i = 0, len = target.length; i < len; i++) {
          element = target[i];
          disposable.add(this.add(element, options));
        }
        return disposable;
      }
      if (Tooltip == null) {
        Tooltip = require('./tooltip');
      }
      keyBindingCommand = options.keyBindingCommand, keyBindingTarget = options.keyBindingTarget;
      if (keyBindingCommand != null) {
        bindings = this.keymapManager.findKeyBindings({
          command: keyBindingCommand,
          target: keyBindingTarget
        });
        keystroke = getKeystroke(bindings);
        if ((options.title != null) && (keystroke != null)) {
          options.title += " " + getKeystroke(bindings);
        } else if (keystroke != null) {
          options.title = getKeystroke(bindings);
        }
      }
      delete options.selector;
      options = _.defaults(options, this.defaults);
      if (options.trigger === 'hover') {
        options = _.defaults(options, this.hoverDefaults);
      }
      tooltip = new Tooltip(target, options, this.viewRegistry);
      if (!this.tooltips.has(target)) {
        this.tooltips.set(target, []);
      }
      this.tooltips.get(target).push(tooltip);
      hideTooltip = function() {
        tooltip.leave({
          currentTarget: target
        });
        return tooltip.hide();
      };
      window.addEventListener('resize', hideTooltip);
      disposable = new Disposable((function(_this) {
        return function() {
          var index, tooltipsForTarget;
          window.removeEventListener('resize', hideTooltip);
          hideTooltip();
          tooltip.destroy();
          if (_this.tooltips.has(target)) {
            tooltipsForTarget = _this.tooltips.get(target);
            index = tooltipsForTarget.indexOf(tooltip);
            if (index !== -1) {
              tooltipsForTarget.splice(index, 1);
            }
            if (tooltipsForTarget.length === 0) {
              return _this.tooltips["delete"](target);
            }
          }
        };
      })(this));
      return disposable;
    };

    TooltipManager.prototype.findTooltips = function(target) {
      if (this.tooltips.has(target)) {
        return this.tooltips.get(target).slice();
      } else {
        return [];
      }
    };

    return TooltipManager;

  })();

  humanizeKeystrokes = function(keystroke) {
    var keystrokes, stroke;
    keystrokes = keystroke.split(' ');
    keystrokes = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = keystrokes.length; i < len; i++) {
        stroke = keystrokes[i];
        results.push(_.humanizeKeystroke(stroke));
      }
      return results;
    })();
    return keystrokes.join(' ');
  };

  getKeystroke = function(bindings) {
    if (bindings != null ? bindings.length : void 0) {
      return "<span class=\"keystroke\">" + (humanizeKeystrokes(bindings[0].keystrokes)) + "</span>";
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
